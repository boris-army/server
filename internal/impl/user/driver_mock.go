// Code generated by MockGen. DO NOT EDIT.
// Source: user_driver.go

// Package user is a generated GoMock package.
package user

import (
	reflect "reflect"

	ports "github.com/boris-army/server/internal/core/ports"
	gomock "github.com/golang/mock/gomock"
)

// MockDriverUser is a mock of DriverUser interface.
type MockDriverUser struct {
	ctrl     *gomock.Controller
	recorder *MockDriverUserMockRecorder
}

// MockDriverUserMockRecorder is the mock recorder for MockDriverUser.
type MockDriverUserMockRecorder struct {
	mock *MockDriverUser
}

// NewMockDriverUser creates a new mock instance.
func NewMockDriverUser(ctrl *gomock.Controller) *MockDriverUser {
	mock := &MockDriverUser{ctrl: ctrl}
	mock.recorder = &MockDriverUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriverUser) EXPECT() *MockDriverUserMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDriverUser) Create(arg0 *ports.CommandUserCreate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDriverUserMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDriverUser)(nil).Create), arg0)
}

// MockPasswordHasher is a mock of PasswordHasher interface.
type MockPasswordHasher struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordHasherMockRecorder
}

// MockPasswordHasherMockRecorder is the mock recorder for MockPasswordHasher.
type MockPasswordHasherMockRecorder struct {
	mock *MockPasswordHasher
}

// NewMockPasswordHasher creates a new mock instance.
func NewMockPasswordHasher(ctrl *gomock.Controller) *MockPasswordHasher {
	mock := &MockPasswordHasher{ctrl: ctrl}
	mock.recorder = &MockPasswordHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordHasher) EXPECT() *MockPasswordHasherMockRecorder {
	return m.recorder
}

// Hash mocks base method.
func (m *MockPasswordHasher) Hash(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockPasswordHasherMockRecorder) Hash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockPasswordHasher)(nil).Hash), arg0)
}
