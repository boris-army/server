// Code generated by MockGen. DO NOT EDIT.
// Source: session_repository.go

// Package session is a generated GoMock package.
package session

import (
	reflect "reflect"

	domain "github.com/boris-army/server/internal/core/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockRepositorySession is a mock of RepositorySession interface.
type MockRepositorySession struct {
	ctrl     *gomock.Controller
	recorder *MockRepositorySessionMockRecorder
}

// MockRepositorySessionMockRecorder is the mock recorder for MockRepositorySession.
type MockRepositorySessionMockRecorder struct {
	mock *MockRepositorySession
}

// NewMockRepositorySession creates a new mock instance.
func NewMockRepositorySession(ctrl *gomock.Controller) *MockRepositorySession {
	mock := &MockRepositorySession{ctrl: ctrl}
	mock.recorder = &MockRepositorySessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositorySession) EXPECT() *MockRepositorySessionMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepositorySession) Create(arg0 *domain.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositorySessionMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepositorySession)(nil).Create), arg0)
}

// IsTerminated mocks base method.
func (m *MockRepositorySession) IsTerminated(sessionId int64, buf []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTerminated", sessionId, buf)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTerminated indicates an expected call of IsTerminated.
func (mr *MockRepositorySessionMockRecorder) IsTerminated(sessionId, buf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTerminated", reflect.TypeOf((*MockRepositorySession)(nil).IsTerminated), sessionId, buf)
}
