// Code generated by MockGen. DO NOT EDIT.
// Source: session_driver.go

// Package session is a generated GoMock package.
package session

import (
	reflect "reflect"

	domain "github.com/boris-army/server/internal/core/domain"
	ports "github.com/boris-army/server/internal/core/ports"
	gomock "github.com/golang/mock/gomock"
)

// MockDriverSession is a mock of DriverSession interface.
type MockDriverSession struct {
	ctrl     *gomock.Controller
	recorder *MockDriverSessionMockRecorder
}

// MockDriverSessionMockRecorder is the mock recorder for MockDriverSession.
type MockDriverSessionMockRecorder struct {
	mock *MockDriverSession
}

// NewMockDriverSession creates a new mock instance.
func NewMockDriverSession(ctrl *gomock.Controller) *MockDriverSession {
	mock := &MockDriverSession{ctrl: ctrl}
	mock.recorder = &MockDriverSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriverSession) EXPECT() *MockDriverSessionMockRecorder {
	return m.recorder
}

// CreateHttp mocks base method.
func (m *MockDriverSession) CreateHttp(create *ports.CommandSessionHttpCreate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHttp", create)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateHttp indicates an expected call of CreateHttp.
func (mr *MockDriverSessionMockRecorder) CreateHttp(create interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHttp", reflect.TypeOf((*MockDriverSession)(nil).CreateHttp), create)
}

// DecodeHttpTokenTo mocks base method.
func (m *MockDriverSession) DecodeHttpTokenTo(dst *domain.SessionHttpToken, src []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeHttpTokenTo", dst, src)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecodeHttpTokenTo indicates an expected call of DecodeHttpTokenTo.
func (mr *MockDriverSessionMockRecorder) DecodeHttpTokenTo(dst, src interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeHttpTokenTo", reflect.TypeOf((*MockDriverSession)(nil).DecodeHttpTokenTo), dst, src)
}
